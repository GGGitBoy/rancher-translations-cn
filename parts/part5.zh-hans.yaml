annotationsSection:
  detail: Key/value 元数据
  key: 键
  noData: 没有注释
  noMatch: 没有符合当前搜索的注释
  title: 注释
  value: 值
authPage:
  adfs:
    buttonText:
      post: 等待返回
      pre: 启用 AD FS 认证
  authenticated:
    header:
      clientId:
        text: "客户端 ID:"
      enterpriseHostName: "地址:"
      key:
        text: "Key:"
      text: 代码库认证信息
  azuread:
    configure:
      applicationId:
        label: 应用 ID
        placeholder: UUID 字符串
      applicationSecret:
        label: 应用密文
      azureADAuthEndpoint:
        label: Auth Endpoint
      azureADEndpoint:
        label: "Endpoint (Azure China 地址: https://login.chinacloudapi.cn)"
      azureADGraphEndpoint:
        label: "Graph Endpoint (Azure China 地址: https://graph.chinacloudapi.cn)"
      azureADTokenEndpoint:
        label: Token Endpoint
      endpoints:
        label: Azure AD 访问地址
      header: 配置 Azure AD 帐户
      help: 输入租户 ID、Client ID 和管理用户详细信息，以连接到 Azure AD 验证帐户信息。
      regions:
        china: China
        custom: 自定义
        standard: 标准
      replyUrl: 在开始设置之前，需要在 Azure AD 为 {appName} 设置一个白名单 URL。请确保 Azure 门户的 Reply URL 部分设置了以下 Reply URL。 请注意，白名单 URL 设置后可能需要 5 分钟以上时间才能生效。
      serverURL:
        label: Rancher Server Url
      tenantId:
        help: 从 Azure AD Portal 获取
        label: 租户 ID
        placeholder: UUID 字符串
    enabled:
      general:
        header: 常规
      header: 危险区域&trade;
      promptDisable: 关闭访问控制
      reallyDisable: 确认关闭吗? 再次点击将关闭访问控制
    header:
      disabled:
        label: Azure AD 未配置
    test:
      authError: Azure 访问未认证授权
      header: 测试并启用认证
      help: "测试验证以确认配置是否正确: "
      password:
        label: 登录密码
      popupError: 请关闭窗口，然后再次点击认证按钮进行认证
      post: 等待 Azure 返回
      pre: 启用 Azure 认证
      username:
        label: 登录用户名
        placeholder: "例如: jsmith"
  bitbucketcloud:
    auth: <a href="https://bitbucket.org/account" target="_blank" rel="nofollow noreferrer">点击此处</a>，在弹出的新窗口中进行应用设置。
    form:
      clientId:
        labelText: Key
      clientSecret:
        labelText: Secret
      headerVariable: 3. 完成配置后，使用您的 Bitbucket Cloud 账号进行验证。
      subtextVariable: 复制并粘贴新创建的 consumer 的 Key 和 Secret
    setup: 2. 配置 Bitbucket Cloud 应用
    target:
      bitbucketcloud: 公有 Bitbucket Cloud
      bitbucketserver: 私有 Bitbucket Server
      header: 1. 选择你要使用的 Bitbucket 类型
    ul:
      li2:
        text: "点击\"OAuth\"，然后点击 \"Add consumer\"，并填写表单内容: "
        ul:
          li1: <b>应用名称:</b> <span class="text-muted">任意名称，例如 My Pipeline</span>
          li2: "授权回调 URL:"
          li3: "<b>权限设置: </b> <b>Account Read</b>, <b>Pull Requests Write</b>, <b>Projects Read</b>和<b>Webhooks Read And Write</b>"
      li3:
        text: 点击 "Save"
  bitbucketserver:
    auth: 访问 Bitbucket Server 并登陆你的账户，点击 Administration，然后点击 Application Links。
    copy: 点击复制
    form:
      headerVariable: 3. 完成配置后，使用您的 Bitbucket Server 账号进行验证。
      hostname:
        labelText: Bitbucket Server 主机
        placeholder: "例如: example.com"
        required: 必须配置私有 Bitbucket Server 主机地址。
      tls:
        labelText: 使用 https 连接
    setup: 2. 配置 Bitbucket Server 应用
    target:
      bitbucketcloud: 公有 Bitbucket Cloud
      bitbucketserver: 私有 Bitbucket Server
      header: 1. 选择你要使用的 Bitbucket 类型
    ul:
      li2:
        text: "创建新的应用链接:"
        ul:
          li1: <b>Link:</b>
          li2: "<b>应用名称: </b> <span class=\"text-muted\">任意名称，例如: My Pipeline</span>"
          li3: <b>勾选 Create incoming link</b>
          li4: "<b>点击: \"Continue\"</b>"
          li5: "Consumer Key:"
          li6: "<b>Consumer Name:</b> <span class=\"text-muted\">任意名称，例如: pipeline</span>"
          li7: "Public Key:"
          li8: <b>点击 "Continue"</b>
    warning: "Bitbucket Server Webhook 需要 SSL 验证，请确保 {appName} 服务器的证书在 Bitbucket Server 中是可信的。点击 <a href=\"https://rancher.com/docs/rancher/v2.x/en/tools/pipelines/configurations/#1-configuring-version-control-providers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">此处</a> 获取更多信息。"
  cas:
    authenticated:
      disableAccess:
        disable: 禁用 CAS 访问
    header:
      disabled:
        label: CAS 没有配置
    notAuthenticated:
      form:
        callbackURL:
          label: 服务回调地址
          placeholder: CAS 服务回调地址
        connectionTimeout:
          label: 服务连接超时时间
          placeholder: 例如：5000
        header: 配置 Rancher 以使用 CAS 进行身份验证
        hostUrl:
          label: CAS 主机
          placeholder: 例如：cas-server.com
        loginEndpoint:
          label: Login Endpoint
          placeholder: e.g. /cas/login
        logoutEndpoint:
          label: Logout Endpoint
          placeholder: e.g. /cas/logout
        passwordField:
          label: Password Field
          placeholder: e.g. password
        port:
          label: 端口
          placeholder: 例如： 6379
        usernameField:
          label: User Name Field
          placeholder: e.g. username
    testAuth:
      authError: 未授权访问 CAS
      buttonText:
        post: 等待 CAS 响应
        pre: 通过 CAS 验证配置
      header: 测试并启用身份验证
      popupError: 请禁用弹出窗口阻止程序，然后再次单击“验证”。
      subtext: 通过测试应用程序的身份验证，来检查应用程序配置是否正确：
  form:
    enterprise:
      labelText: 使用私有 {type} 企业版部署
    enterpriseHost:
      labelText: 企业版主机
      placeholder: "例如: example.com"
    headerVariable: 2. 完成配置后，使用您的 {SCM} 账号进行验证。
    isEnterprise:
      labelText: 使用 https 连接
  github:
    auth: "标准版 GitHub: <a href=\"https://github.com/settings/developers\" target=\"_blank\" rel=\"nofollow noreferrer\">点击此处</a> 访问并登陆 GitHub，在弹出的新窗口中进行应用设置。"
    authenticated:
      disableAccess:
        confirmDisable: 确认关闭吗? 再次点击将关闭访问控制
        disable: 禁用 Github 访问
        header: 危险区域&trade;
        warning: "<b class=\"text-danger\">警告: </b>禁用访问控制将导致任何能够访问此页面或 API 的用户拥有对 {appName} 的完全控制权限。"
      header:
        clientId:
          helpText: 要修改设置的 GitHub 应用，请在下方禁用访问控制后重新设置
          text: "客户端 ID: "
        enterpriseHostName: "企业版主机地址:"
        text: 认证信息
    enterprise: GitHub 企业版
    enterpriseAuth: "企业版 GitHub: 通过企业版 GitHub 地址访问并登陆企业版 GitHub，然后点击 Settings，再点击 Applications 进行设置。"
    form:
      clientId:
        labelText: 客户端 ID
      clientSecret:
        labelText: 客户端秘钥
      subtextVariable: 将新创建应用的 Client ID 和 Client Secret 复制粘贴到对应的输入框中。
    header:
      disabled:
        label: GitHub 没有配置
    notAuthenticated:
      form:
        clientId:
          labelText: 客户端 ID
        clientSecret:
          labelText: 客户端秘钥
        enterpriseHost:
          labelText: 地址
          placeholder: "例如: github.example.com"
        ghEnterprise:
          labelText: 使用私有 GitHub 企业版部署
        header: 2. 配置 {appName} 以使用 GitHub 进行身份验证
        isGHEnterprise:
          labelText: 使用安全连接
        subtext: 将新创建的 GitHub 应用 Client ID 和 Secret 复制粘贴到下方的对应输入框中。
      header: 1. 设置 GitHub 应用
      ul:
        li1:
          text: 标准版 GitHub。<a href="https://github.com/settings/developers" target="_blank">点击此处</a> 并在弹出的新窗口中进行应用设置。
          ul:
            li1: 企业版 GitHub。请登录账号，点击 Settings，然后点击 Applications 进行设置
        li2:
          text: "点击 \"Register new application\" 并填写表单内容: "
          ul:
            li1: "<b>应用名称: </b><span class=\"text-muted\">应用名称，例如: My {appName}</span>"
            li2: "应用首页 URL: "
            li3: "<b>应用描述: </b><span class=\"text-muted\">应用描述，可选</span>"
            li4: "授权回调 URL: "
        li3:
          text: 点击 "注册应用程序"
    standard: GitHub 标准版
    testAuth:
      authError: 未获取 Github 访问权限
      buttonText:
        post: 等待 GitHub 返回
        pre: 启用 GitHub 认证
      header: 3. 测试并启用认证
      popupError: 请关闭弹出的窗口并点击认证按钮重新认证。
      subtext: 测试以确认配置是否正确
    ul:
      li2:
        text: "点击 \"注册新应用\" 并填写表单内容:"
        ul:
          li1: "<b>应用名称: </b><span class=\"text-muted\">任意名称，例如: My Pipeline。</span>"
          li2: "主页 URL: "
          li3: "<b>应用描述: </b><span class=\"text-muted\">应用描述，可选。</span>"
          li4: "授权回调 URL: "
      li3:
        text: 点击 注册应用
  gitlab:
    auth: "标准版 GitLab: <a href=\"https://gitlab.com/profile/applications\" target=\"_blank\" rel=\"nofollow noreferrer\">点击此处</a> 访问并登陆 GitLab，在弹出的新窗口中进行应用设置。"
    enterpriseAuth: "企业版 GitLab: 通过企业版 GitLab 地址访问并登陆 GitLab，然后点击 Settings，再点击 Applications 进行设置。"
    form:
      clientId:
        labelText: Application Id
      clientSecret:
        labelText: Secret
      subtextVariable: 将新创建应用的 Application Id 和 Secret 复制粘贴到对应的输入框中。
    ul:
      li2:
        text: "填写表单内容:"
        ul:
          li1: "<b>应用名称: </b><span class=\"text-muted\">任意名称，例如: My Pipeline。</span>"
          li2: "授权回调 URL:"
      li3:
        text: 点击 Save application
  googleoauth:
    authenticated:
      disableAccess:
        confirmDisable: 确定关闭吗?再次单击将关闭访问控制。
        disable: 禁用谷歌访问
        header: 危险警告
        warning: "<b class=\"text-danger\">Caution: </b>禁用访问控制将为所有能够访问此页面或 API 的人提供对 {appName} 的完全控制。"
      header:
        adminEmail:
          text: "管理员邮箱: "
        text: 身份验证
    header:
      disabled:
        label: Google 未配置。有关设置身份验证的更详细说明，请查看相关 <a href="https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/" target="_blankRancher">文档</a>。
    notAuthenticated:
      form:
        adminEmail:
          helperText: 输入与您的帐户相关联的管理电子邮件。
          labelText: 管理员邮箱
        hostname:
          helperText: 输入您的帐户域。
          labelText: 账户域
        nestedGroupMembershipEnabled:
          labelText: 嵌套的组成员
        oauthCredential:
          helperText: 复制并粘贴 OAuth 凭证 JSON，该 JSON 可以在您的谷歌 API 开发人员控制台 (上面的步骤 3) 中找到。
          labelText: OAuth 凭证
        serviceAccountCredential:
          helperText: 复制并粘贴服务帐户凭证 JSON，可以在谷歌 API 开发人员控制台的服务帐户部分中找到 (上面的步骤 4)。
          labelText: 服务帐户凭据
      ul:
        li1:
          helpertext: "注意: Rancher URL 必须是正确的 FQDN 格式。"
          ul:
            li1: 登录您的帐户，切换到 "APIs 和服务" 并点击 "凭证"。
        li2:
          text: "点击 \"OAuth 同意屏幕\" 并填写以下表单: "
          ul:
            li1: "<b>授权域名: </b> "
            li2: "<b>应用首页: </b> "
            li3: 在谷歌 api 的作用域下，启用 "email"、"profile" 和 "openid"。
            li4: "授权回调 URL: "
        li3:
          ul:
            li1: 选择 "创建凭据" 下拉框，并选择 "OAuth 客户端 ID"，然后选择 "Web application"。
            li2: "<b>授权 Javascript 来源: </b> "
            li3: "<b>授权重定向 URLs: </b> "
            li4: 点击 "创建"，然后点击 "下载 JSON" 按钮。
            li5: 将下载的 JSON 文件上传到 OAuth 凭据框中。
        li4:
          ul:
            li1: <a href="https://cloud.google.com/iam/docs/service-accounts">点击此处</a> 了解有关创建和管理服务帐户的信息。
            li2: 选择您的服务帐户。
            li3: 选择 JSON 作为键类型并点击 "创建"。
    stepOne:
      header: "第一步: "
      info: 对于标准谷歌，<a href="https://console.developers.google.com/apis/credentials" target="_blank">点击此处</a> 访问谷歌开发者控制台。
    stepThree:
      header: "第三步: "
      info: 创建服务帐户凭证
      subHeader: "查看 <a href=\"https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/#creating-service-account-credentials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">操作指南</a>:"
    stepTwo:
      header: "第二步: "
      info: 导航到 "OAuth 同意屏幕" 选项卡并填写表单
    testAuth:
      authError: 未授权谷歌访问
      buttonText:
        post: 等待 Google 返回
        pre: 启用 Google 认证
      popupError: 请关闭弹出的窗口并点击认证按钮重新认证。
    warning:
      doc: 有关设置身份验证的更详细说明，请访问相关 <a href="https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/" target="_blank">文档</a>。
  header: 流水线设置
  keycloak:
    buttonText:
      post: 等待返回
      pre: 启用 Keycloak 认证
  localAuth:
    accessControl:
      buttonText:
        post: 启用中...
        pre: 启用本地认证
      header: 2. 启用访问控制
      helpText: 点击以开启访问控制并登录
    accessDisabled:
      form:
        confirmPassword:
          labelText: 确认密码
        login:
          labelText: 登录用户名
          placeholder: "例如: jsmith"
        name:
          labelText: 全名
          placeholder: "例如: John Smith"
        password:
          labelText: 密码
      header: 1. 设置管理员用户
      helpText: 该账户将成为管理员并拥有对 {appName} 的完全控制权限。
    accessEnabled:
      buttonText:
        disable: 确认关闭吗? 再次点击将关闭访问控制。
        prompt: 关闭访问控制
      header: 危险区域&trade;
      warning: "<b class=\"text-danger\">警告: </b>禁用访问控制将导致所有能够访问此页面或 API 的用户拥有对 {appName} 的完全控制权限。"
    header:
      disabled: 本地验证未配置
      enabled: 本地验证已启用
    subtext:
      disabled: "{appName} 能够被设置为仅允许 {appName} 本地数据库中配置的用户访问。当前系统未进行设置，因此任何可以访问此页面 (或 API) 的用户都具有系统的完全控制权限。"
      enabled:
        alwaysOn: 本地身份验证将始终启用，您可以在本地认证基础之上添加其他认证方案。
        linkText: 管理账号
        text: "{appName} 已设置本地账户访问"
    warning: 当启用外部身份验证时，{appName} 将外部主体与当前用户的本地身份相关联。关联的主体将接收所有全局权限，以及当前用户的项目和集群角色绑定。
  okta:
    buttonText:
      post: 等待返回
      pre: 启用 Okta 认证
  ping:
    buttonText:
      post: 等待返回
      pre: 启用 Ping 认证
  root:
    header: 访问控制
  saml:
    accessEnabled:
      disable: 禁用访问控制
      header: 认证
    authError: 未授权访问
    disabled:
      entityId:
        display: "Entity ID Field:"
        labelText: Entity ID Field
      groups:
        display: "组: "
        labelText: 组
      header: 1. 配置 {providerName} 账户。
      headerDetail: 填写 {providerName} 账户信息。
      label: "{providerName} 未配置"
      name:
        display: "显示名称: "
        labelText: 显示名称
      rancherApiHost:
        display: "{appName} API 地址: "
        labelText: "{appName} API 地址"
      testAuth:
        header: "{step}. 测试并启用认证"
        subtext: 测试以确认配置是否正确
      uid:
        display: "UID: "
        labelText: UID
      username:
        display: "用户名: "
        labelText: 用户名
    enabled:
      authenticated:
        header:
          text: 认证
      displayName: 显示名称
      groupsField: "组: "
      userId: "用户 ID: "
      userName: "用户名: "
    header:
      disabled:
        label: "{providerName} 未配置。"
    popupError: 请禁用弹出窗口拦截器并再次单击 “验证”。
    providerName:
      adfs: AD FS
      keycloak: Keycloak
      okta: Okta
      ping: Ping
      shibboleth: Shibboleth
  setting:
    cacerts:
      label: 配置证书，支持从自签名的 Git 服务中拉取代码
      saveActionLabel: 保存证书
      show: 修改证书
    executor:
      label: 最大流水线运行个数
      scale: 数量
    limit:
      label: 为执行程序配置资源预留和限制
      saveActionLabel: 更新预留和限制
  setup: 1. 配置 {type} 应用
  shibboleth:
    advanced:
      hr: 其他配置参数
    buttonText:
      edit: 测试 Shibboleth 配置
      post: 等待 IDP 响应
      pre: 启用 Shibboleth 认证
    openLdap:
      detail: 在下面添加 OpenLDAP 配置来配置搜索功能。
      header: 2. OpenLDAP 搜索配置
      help: "<span class='text-italic'>注意: 只有在使用 Shibboleth 授权配置 OpenLDAP 搜索时，才需要本节中的必需字段。</span>"
    providerName:
      shibboleth: Shibboleth
  testAuth:
    buttonText:
      post: 授权中
      preVariable: 授权
    header: 3. 测试并启用验证
    subtext: "通过测试认证来检查配置是否正确: "
catalogPage:
  index:
    action:
      alreadyDeployed: 已经部署
      launch: 查看详情
      notCompatible: 不兼容
    allCatalogs: 全部应用商店
    allCategories: 所有分类
    certified:
      pl:
        experimental: 实验性
        partner: 官方
        rancher: 核心
      rancher:
        experimental: 实验性
        partner: 官方
        rancher: Rancher Labs
    filters:
      label: 应用过滤
    header: 应用列表
    manage: 管理
    noData:
      plural: 当前目录下没有符合的应用模板
      singular: 没有符合的应用模板
    refreshBtn: 刷新
    search:
      label: 搜索
    windowsWarning: 大多数应用程序应该在 Linux 集群中运行。因此，如果将它们部署在当前集群中，则可能无法工作。
  istio:
    header: 流量规则商店
cruStorageClass:
  allowVolumeExpansion:
    label: 允许用户扩展卷
  aws-ebs:
    encrypted:
      label: 加密
    fsType:
      label: 文件系统
      placeholder: "例如: ext4"
    iopsPerGB:
      label: 预置 IOPS
      unit: GB/s
    kmsKeyId:
      automatic: "自动: 生成密钥"
      label: 用于加密的 KMS Key ID
      manual: "手动: 使用特定的秘钥(完整的 ARN)"
    type:
      gp2: GP2 - 通用 SSD
      io1: IO1 - Provisioned IOPS SSD
      label: 卷类型
      sc1: SC1 - Cold-Storage HDD
      st1: ST1 - Throughput-Optimized HDD
    zone:
      automatic: "自动: 集群中有主机的区域"
      label: 可用区
      manual: "手动: 选择特定区域"
      placeholder: us-east-1d，us-east-1c
  azure-disk:
    kind:
      dedicated: 专用
      label: 类型
      managed: 托管
      placeholder: "例如: 共享"
      shared: 共享
    location:
      label: 区域
      placeholder: "例如: eastus"
    new: 新建 Azure 磁盘
    skuName:
      label: Sku 名称
      placeholder: "例如: Standard_LRS"
    storageAccount:
      label: 存储帐户
      placeholder: "例如: azure_storage_account_name"
    storageaccounttype:
      label: 存储帐户类型
      placeholder: "例如: Standard_LRS"
  azure-file:
    location:
      label: 区域
      placeholder: "例如: eastus"
    skuName:
      label: Sku 名称
      placeholder: "例如: Standard_LRS"
    storageAccount:
      label: 存储帐户
      placeholder: "例如: azure_storage_account_name"
  cinder:
    availability:
      automatic: "自动: 集群中有主机的区域"
      label: 可用区
      manual: "手动: 选择特定区域"
      placeholder: "例如: nova"
    type:
      label: 卷类型
      placeholder: "例如: fast"
  customize:
    detail: 自定义高级选项
    title: 自定义
  description:
    placeholder: "例如: AWS EBS 存储"
  gce-pd:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    replicationType:
      label: Replication Type
      none: Zonal
      regionalPd: Regional
    type:
      label: 卷类型
      pd-ssd: SSD
      pd-standard: 标准
    zone:
      automatic: "自动: 集群中有主机的区域"
      label: 可用区
      manual: "手动: 选择特定区域"
      placeholder: us-central1-a，us-central1-b
  glusterfs:
    clusterid:
      label: 集群 ID
      placeholder: "例如: 630372ccdc720a92c681fb928f27b53f"
    gidMax:
      label: GID MAX
      placeholder: "例如: 50000"
    gidMin:
      label: GID MIN
      placeholder: "例如: 40000"
    resturl:
      label: REST URL
      placeholder: e.g. http://127.0.0.1:8081
    restuser:
      label: REST 用户
      placeholder: "例如: admin"
    restuserkey:
      label: REST 用户密钥
      placeholder: "例如: password"
    secretName:
      label: 密文名称
      placeholder: "例如: heketi-secret"
    secretNamespace:
      label: 密文命名空间
      placeholder: "例如: default"
    volumetype:
      label: 卷类型
      placeholder: "例如: replicate:3"
  longhorn:
    fromBackup:
      label: 从备份
      placeholder: ""
    numberOfReplicas:
      label: 副本数量
      placeholder: "例如: 3"
    staleReplicaTimeout:
      label: 陈旧副本超时
      placeholder: "例如: 30"
  mountOptions:
    addActionLabel: 添加
    label: 挂载选项
    noData: 没有挂载选项
  name:
    placeholder: "例如: 储存"
  parameters:
    addActionLabel: 添加参数
    detail: 为存储类配置特定的参数
    title: 参数
  portworx-volume:
    aggregation_level:
      label: 聚合级别
      placeholder: "例如: 0"
    block_size:
      label: 块大小
      placeholder: "例如: 32"
    ephemeral:
      label: 临时卷
      placeholder: 是否是临时卷，true 或者 false，默认 false
    fs:
      label: 文件系统
      placeholder: "例如: ext4"
    io_priority:
      label: I/O 优先级
      placeholder: "例如: low"
    repl:
      label: Repl
      placeholder: "例如: 1; 0 为整个设备"
    snap_interval:
      label: 快照间隔
      placeholder: "例如: 70"
  provisioner:
    label: 提供者
  pv:
    detail: 当前存储类提供的持久卷(PV)。
    title: 持久卷(PV)
  quobyte:
    adminSecretName:
      label: 管理密文名称
      placeholder: "例如: quobyte-admin-secret"
    adminSecretNamespace:
      label: 管理密文命名空间
      placeholder: "例如: kube-system"
    group:
      label: 组
      placeholder: "例如: root"
    quobyteAPIServer:
      label: Quobyte API 服务器
      placeholder: e.g. http://138.68.74.142:7860
    quobyteConfig:
      label: Quobyte 配置
      placeholder: "例如: BASE"
    quobyteTenant:
      label: Quobyte 租户
      placeholder: "例如: DEFAULT"
    registry:
      label: 镜像库
      placeholder: "例如: 138.68.74.142"
    user:
      label: 用户
      placeholder: "例如: root"
  rbd:
    adminId:
      label: 管理员账号(ID)
      placeholder: "例如: kube"
    adminSecretName:
      label: 管理密文
      placeholder: "例如: secret"
    adminSecretNamespace:
      label: 管理密文所在命名空间
      placeholder: "例如: kube-system"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    imageFeatures:
      label: 镜像功能
      placeholder: "例如: layering"
    imageFormat:
      label: 镜像格式
      placeholder: "例如: 2"
    monitors:
      label: Monitors 地址
      placeholder: "例如: 10.16.153.105:6789"
    pool:
      label: 池
      placeholder: "例如: kube"
    userId:
      label: 用户 ID
      placeholder: "例如: kube"
    userSecretName:
      label: 用户密文名称
      placeholder: "例如: ceph-secret-user"
    userSecretNamespace:
      label: 用户密文命名空间
      placeholder: "例如: default"
  reclaimPolicy:
    Delete: 在工作负载释放后删除卷和底层设备
    Recycle: "回收: 清空内容，然后为以后的工作负载保留卷"
    Retain: 保留卷以进行手动清理
    label: 回收策略
  scaleio:
    fsType:
      label: 文件系统类型
      placeholder: "例如: xfs"
    gateway:
      label: 网关
      placeholder: "例如: https://192.168.99.200:443/api"
    protectionDomain:
      label: 保护域
      placeholder: "例如: pd0"
    readOnly:
      label: 只读
      placeholder: "例如: false"
    secretRef:
      label: 密文
      placeholder: "例如: sio-secret"
    storageMode:
      ThickProvisioned: 精简置备
      ThinProvisioned: 精简配置
      label: 存储模式
    storagePool:
      label: 存储池
      placeholder: "例如: sp1"
    system:
      label: 系统
      placeholder: "例如: scaleio"
  storageos:
    adminSecretName:
      label: 管理密文名
      placeholder: "例如: storageos-secret"
    adminSecretNamespace:
      label: 管理密文命名空间
      placeholder: "例如: default"
    description:
      label: 描述
      placeholder: "例如: Kubernetes 卷"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    pool:
      label: 池
      placeholder: "例如: default"
  title:
    edit: "编辑存储类: {name}"
    new: 添加存储类
    view: "存储类: {name}"
  volumeBindingMode:
    immediate: 创建 PersistentVolumeClaim 后，绑定并提供一个持久卷
    label: 卷绑定模式
    waitForFirstConsumer: 使用 PersistentVolumeClaim 创建一个 Pod 后，绑定并提供一个持久卷
  vsphere-volume:
    cachereservation:
      label: 缓存预留
      placeholder: "例如: 20"
    datastore:
      label: 数据存储
      placeholder: "例如: VSANDatastore"
    diskformat:
      eagerzeroedthick: 厚置备置零
      label: 磁盘格式
      thin: 精简
      zeroedthick: 厚置备延迟置零
    fstype:
      label: 文件系统类型
      placeholder: "例如: ext3"
    hostFailuresToTolerate:
      label: 主机失败容忍
      placeholder: "例如: 2"
    storagePolicyName:
      label: 存储策略名称
      placeholder: "例如: gold"
f5CISPage:
  authError: local集群不支持F5 CIS 服务
  confirmDisable: 你确定吗？再次点击将会禁用 F5 负载均衡服务。
  disable: 禁用
  disabled: F5 负载均衡服务在当前集群中尚未开启。
  enableActionLabel: 启用
  form:
    flannelName:
      label: Flannel Name
      placeholder: "例如: /Common/MyFlannel"
    partition:
      label: BIG-IP Partition
      placeholder: "例如: Common"
    password:
      label: BIG-IP 密码
      placeholder: 密码
    pool: Pool 成员类型
    type: 集群网络
    url:
      label: BIG-IP URL
      placeholder: "例如: http://example.com"
    username:
      label: BIG-IP 用户名
      placeholder: "例如: John"
    version: F5 负载均衡服务组件版本
  notReady: 未找到F5负载均衡服务Chart, 请确认系统<a href="/g/catalog">应用商店</a>配置是否正确。
  title: F5 负载均衡服务
  toUpdate: F5 负载均衡服务已启动。
  warning: 请注意，当 Pool成员类型 选择 Cluster 时，每个集群需要使用独立的 F5 BIG IP，无法与其它集群共享 F5 BIG IP。
formCommand:
  autoRestart:
    always: 总是
    label: 自动重启
    no: 从不
    onFailure: 失败时<span class="text-muted"> (非 0 退出代码)</span>总是
    onFailureCondPrefix: 失败时，最多
    onFailureCondSuffix: "{limit, plural,\n=1{ 次 }\nother { 次 }\n}\n"
  command:
    label: 命令 (CMD)
    placeholder: "例如: /usr/sbin/httpd -f httpd.conf"
  console:
    both: 交互 &amp; TTY 终端<span class="text-muted"> (-i -t)</span>
    interactive: 交互<span class="text-muted"> (-i)</span>
    label: 控制台
    none: 无
    terminal: TTY 终端<span class="text-muted"> (-t)</span>
  detail: 配置容器启动时将运行的可执行文件。
  entryPoint:
    label: 入口 (Entrypoint)
    placeholder: "例如: /bin/sh"
  environment:
    label: 环境标签
  fsgid:
    label: 文件系统组
    placeholder: "例如: 501"
  terminationGracePeriodSeconds:
    helpText: 容器有这么长的时间处理数据并自己停止，超过这个时间将被强制停止。
    label: 停止超时
  title: 入口/命令
  uid:
    label: 用户 UID
    placeholder: "例如: 501"
  workingDir:
    label: 工作目录
    placeholder: "例如: /myapp"
formContainerLifecycle:
  command:
    label: 命令
    placeholder: "例如: pre-stop.sh"
  detail: 回调使容器能够了解其管理生命周期中的事件，并在执行相应的生命周期回调时运行在处理程序中实现的代码。
  hookType:
    command: 在容器的 cgroups 和名称空间中执行特定的命令
    http: 对容器上的特定端点执行 HTTP 请求
    https: 对容器上的特定端点执行 HTTPS 请求
    none: 无
    tcp: TCP 端口检查
  host:
    label: Host Header
    placeholder: "例如: example.com"
  httpHeaders:
    addActionLabel: 添加 Headers
    keyLabel: Http 头字段
    keyPlaceholder: "例如: User-Agent"
    label: 其他的 HTTP Headers
    valuePlaceholder: "例如: value"
  path:
    label: HTTP(S)服务器上的访问路径
    placeholder: "例如: /test"
  port:
    label: 容器端口
    placeholder: "例如: 80"
  postStartHook: PostStart
  preStopHook: PreStop
  title: 容器生命周期回调
formIngress:
  addRuleLabel: 添加规则
  backendType:
    label: 后端类型
  defaultBackend:
    label: 将此规则设置为默认后端
    mark: 默认后端
  host:
    label: 访问域名
    placeholder: "例如: example.com"
  hostMode:
    automatic: 自动生成 <code>.{domain}</code> 后缀域名
    default: 默认后端
    defaultDisabled: Ingress 控制器不支持默认后端。
    existing: 继续使用当前主机名 <code>{domain}</code>
    manual: 自定义域名
  label: 规则
  mode:
    service: DNS 记录
    workload: 工作负载
  noRules: 没有规则
  removeRuleLabel: 移除此规则
formLabelsAnnotations:
  detail: "用于调度决策的键值对。后端重写请配置注释: 键: nginx.ingress.kubernetes.io/rewrite-target，值: /。"
  title: 标签/注释
formNameDescription:
  description:
    expand: 添加描述
    label: 描述
    placeholder: 描述
  name:
    label: 名称
    placeholder: 名称
formRelatedWorkloads:
  detail: 正在使用它的工作负载
  nodata: 没有相关的工作负载
  title: 相关的工作负载
formSecurity:
  allowPrivilegeEscalation:
    disable: 否
    enable: "是: 容器可以获得比其父进程更多的特权"
    label: 提升特权
  capabilities:
    add: 增加内核功能
    drop: 移除内核功能
    helpBlock:
      link: 更多信息
      text: 内核能力能够对容器所拥有的超级用户权限进行更细粒度的控制。
  cpuLimit:
    label: CPU 限制
    set: 限制为
    unit: milli CPUs
    unlimited: 无限制
  cpuPinning:
    label: CPU 绑定
    placeholder: "例如: 0,1,3  默认: All"
  detail: 授予或限制容器影响所运行主机的能力。
  deviceBinding:
    addActionLabel: 添加绑定
    label: 设备绑定
    pathContainer:
      label: 容器内路径
      placeholder: "例如: /dev/xsdc"
    pathHost:
      label: 主机内路径
      placeholder: "例如: /dev/sdc"
    permissions:
      label: 权限
  gpuReservation:
    label: NVIDIA GPU 预留
    memUnit: GiB
    placeholder: "例如: 1"
    set: 限制为
    shared: 共享 GPU 内存
    sharedTips: 设置共享 GPU 内存的同时，Rancher 会自动为工作负载设定 GPU 调度器名称
    unit: GPUs
  hostIPC:
    label: 使用主机的 IPC 命名空间
  hostPID:
    label: 使用主机的 PID 命名空间
  isolation:
    default: 默认(容器)
    hyperv: HyperV (虚拟机)
    label: 隔离
  memoryLimit:
    label: 内存限制
    set: 限制为
    unlimited: 无限制
  memoryReservation:
    label: 内存预留
    placeholder: "例如: 128"
  milliCpuReservation:
    label: CPU 预留
    placeholder: "例如: 1000"
    unit: milli CPUs
  privileged:
    disable: 否
    enable: "是: 容器具有所有主机访问权限"
    label: 特权模式
  pullImage:
    always: 总是拉取
    ifNotPresent: 不存在则拉取
    label: 镜像拉取策略
  readOnlyRootFilesystem:
    disable: 否
    enable: "是: 容器有只读的根文件系统"
    label: 只读根文件系统
  runAsNonRoot:
    disable: 否
    enable: "是: 容器必须以非 root 用户身份运行"
    label: 以非 root 用户身份运行
  shares:
    label: CPU 份额
    placeholder: "例如: 1024"
  swapLimit:
    default: 限制为两倍物理内存
    label: 交换内存
    none: 不允许使用交换内存
    set: 限制为
    unlimited: 无限制
  swappiness:
    default: 使用主机的默认值
    label: Swappiness
    none: 最小
    set: 自定义 (1-100)
  title: 安全/主机设置
  vGpuReservation:
    label: Orion X GPU 预留
    placeholder: "例如: 1"
    unit: vGPUs
formVolumeRow:
  addMount: 添加映射
  customLogPath:
    helpText: 我们将部署 Flexvolume 驱动程序来创建卷并将日志挂载到主机，GKE 和 RKE 集群现在支持该功能。
  mode:
    bindMount: 主机映射卷
    certificate: 证书卷
    configmap: 配置映射卷
    existingPvc: PVC
    existingVct: PVC 模板
    existingVolume: 已有的卷
    label: 卷类型
    newPvc: PVC
    newVolume: 临时卷
    newVolumeClaimTemplate: 新的 PVC 模板
    secret: 密文卷
    tmpfs: Tmpfs
  mounts:
    helper: 卷不会被挂载到当前容器中，它可能被 Pod 中的其他容器使用。
    mountPoint: 容器路径
    readOnly: 只读
    subPath: 子路径(仅适用于数据卷挂载，不适用于主机路径映射)
  name:
    label: 卷名
    placeholder: "例如: vol1"
  noVolume: 卷不会被挂载到当前容器中，它可能被 Pod 中的其他容器使用。
  prompt: 选择 PVC...
  readOnly: 只读
  remove: 删除卷
  subPath: 卷中的子路径
  volumeClaimTemplateName:
    label: PVC 模板名
    placeholder: "例如: vol1"
    vctWarning: 由于 Kubernetes 中的一个<a href="https://github.com/kubernetes/kubernetes/issues/69041" target="_blank" rel="nofollow noreferrer noopener">BUG</a>，使用 PVC 模板启动的有状态工作负载将不可编辑。请注意，在启动新工作负载之前存在此限制。
loginGithub:
  buttonText: 用 GitHub 登录
loginUserPass:
  externalProvider: 使用 {externalName} 用户
  genericLoginLabel: 登录
  local: 使用本地用户
  loggingInLabel: 登录中...
  loginLabel: 通过 {provider} 登录
  passwordLabel: 密码
  provider: "{kind}"
  remember: 记住
  userLabel: 用户名
  userPlaceholder: "例如: jsmith"
metricsAction:
  description: 展开以查看实时监控数据
  detail:
    label: 详情模式
  from:
    label: 起始时间
  grafana:
    label: Grafana
  noData: 没有足够的数据绘制图表
  periods:
    1h: 1 小时
    24h: 24 小时
    30d: 30 天
    5m: 5 分钟
    6h: 6 小时
    7d: 7 天
    custom: 自定义时间段
  sections:
    container: 容器监控
    pod: Pod 监控
    workload: 工作负载监控
  summary:
    label: 聚合模式
  to:
    label: 结束时间
modalConfirmYamlMonitoring2Form:
  helpText: 请注意，当切换回表单编辑时，非表单数据可能会发生数据丢失。在点击确认之前，请确认不会受影响。
modalRevertSettings:
  current: 当前值
  default: 默认值
  title: 将 {setting} 还原为默认值?
modalWechat:
  title: 扫码关注 Rancher 中国微信技术群
  wechat: 微信
newContainer:
  add:
    container: 部署 Pod
    globalService: 添加全局工作负载
    service: 部署工作负载
    sidekick: 部署 Sidecar
    sidekickName: 部署 {name} 的 Sidecar
  all: Any
  containerType:
    init: Init 容器
    standard: 标准容器
    title: Sidecar 类型
  description:
    placeholder: "例如: Myapp"
  environment:
    addAction: 添加变量
    addFrom: 添加附加资源
    detail: 设置容器可见的环境变量，包括从其他资源(如密文等)注入的值。
    from: 引用其他资源
    keyLabel: 键
    keyPlaceholder: e.g. FOO
    label: 环境变量
    valueLabel: 值
    valuePlaceholder: e.g. bar
  errors:
    duplicateName: 工作负载 {service} 中已经存在名为 {name} 的 sidecar。
    noSidekick: 选择要添加 sidecar 的工作负载。
    quotaRequired: "\"{key}\" 必需设置，因为在项目上执行资源配额。"
  linux: Linux
  name:
    placeholder: e.g. myapp
  os: Target OS
  saveNew: 启动
  saveUpgrade: 升级
  sidekick:
    detail: "{service} 有多个容器，希望升级哪个容器?"
    header: 升级服务
    primary: 主容器
    sidekick: Sidecar
    title: 选择加载配置的服务来升级。
  upgrade:
    container: 升级容器
    globalService: 升级全局服务
    service: 升级服务
    sidekick: 升级 Sidecar
    sidekickName: 升级 {name} 的 Sidecar
  windows: Windows
nodeGroupRow:
  additional:
    button: Add Type
    label: Spot Instance Types
  desired:
    label: Desired ASG Size
  gpu:
    help: This option will be ignored because the selected launch template includes a custom AMI.
    label: 启用GPU实例
  groups:
    label: Group Details
  images:
    help: Custom AMIs is an advanced use case. We highly recommended that you read and fully understand the requirements for creating custom EKS AMIs <a href="https://aws.amazon.com/premiumsupport/knowledge-center/eks-custom-linux-ami/" target="_blank">here</a>.
    label: AMI ID
  instance:
    help: "Warning: Instance Type will not be sent when requesting spot instances. You must include Spot Instance types instead."
    label: 实例类型
    prompt: Select Instance Type
  labels:
    addLabel: 添加标签
    label: 标签
  launchTemplates:
    label: Launch Template
    managed: Rancher Managed Launch Template
    managedVersion: Managed Version
    prompt: Select Launch Template
  max:
    label: Maximum ASG Size
  min:
    label: Minimum ASG Size
  name:
    label: 节点组名称
  nodeVolumeSize:
    label: Node Volume Size
    placeholder: e.g. 20
  nodes:
    label: Node Details
  remove:
    label: 删除节点组
  requestSpot:
    help: Amazon recommends using spot instances in EKS with multiple instance types. Since the selected template can have at most one instance type, your nodes may be interrupted more often.
    label: Request Spot Instances
  resourceTags:
    label: Instance Resource Tags
  ssh:
    label: SSH Key
  tags:
    addLabel: Add Tag
    label: Tags
  templateVersions:
    label: Template Version
    prompt: Select Version
  userData:
    help: "Pass user data to <a href='https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-user-data' target='_blank'>Amazon using cloud-init</a> to automate common operations."
    label: User Data
    placeholder: Paste in the script
  version:
    label: Kubernetes 版本
    upgrade: 将节点组版本从 { from } 升级到 { version }。
    warning: 选择了一个新的集群版本。一旦完成，您可以返回并升级节点组版本。
optionallyNamespaced:
  scope:
    label: 作用域
    namespace: 单个命名空间
    project: 此项目所有命名空间
pageFooter:
  cnforums: 中文社区
  download:
    link: 下载 Rancher CLI
    linux: Linux
    mac: MacOS
    windows: Windows
  downloadMirror: 下载Rancher资源
  forums: 论坛
  help: 帮助&文档
  issues: 提交问题
  notARelease: (非正式发布)
  showSystem: 显示系统容器
  slack: Slack
persistentVolumePage:
  addActionLabel: 添加 PV
  header: 持久卷(PV)列表
  noData: 没有配置持久卷
  noMatch: 没有符合当前搜索的持久卷
  source:
    label: 存储源
tooltipNodeGroupUpdate:
  gkeLabel: A node pool Kubernetes version can be updated
  label: 一个节点组 Kubernetes 版本可以更新。
  link: 编辑版本
vmConsole:
  canvas: 暂不提供 Canvas 支持
  footerActions:
    buttonCancel: 关闭
    buttonSend: 发送 Ctrl-Alt-Delete
  header: "控制台: "
  protip: "高级技巧: 启动命令行时按下 {key} 键可在新窗口中打开。"
volumeRow:
  mounts:
    readOnly: (只读)
