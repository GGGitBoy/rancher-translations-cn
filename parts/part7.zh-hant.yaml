advancedSection:
  hideText: 隱藏高級選項
  showText: 顯示高級選項
apiPage:
  actionButton: 添加Key
  currentEndpoint: "訪問地址:"
  detail: "API密鑰與特定用戶(例如: {name})綁定，可以創建、刪除和操作有權訪問的所有集群和項目。"
  header: API & Keys
  table:
    created: 創建時間
    description: 描述
    expires:
      label: 過期時間
      never: 永不過期
    name: 訪問密鑰
    noData: 沒有定義API密鑰
    scope: 范围
    state: 狀態
banner:
  alerting: 从 Rancher v2.5.0 开始，Cluster Manager 中的 Alerts 已不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。请在 Cluster Explorer 应用程序和市场中查看 Rancher 新版<a href="{dashboardLink}/monitoring">监控</a>中 Alerts 的集成。
  cis: 从 Rancher v2.5.0 开始，Cluster Manager 中的 CIS 扫描功能已不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。对于使用基准版本 1.5 及以上的 CIS 扫描，请参见 Cluster Explorer 应用程序和市场中新版 <a href="{dashboardLink}/cis">CIS 扫描</a>。
  dashboard: 请尝试使用 <a href="{dashboardLink}">Cluster Explorer</a> 查看和管理 Kubernetes 资源。
  istio: Istio 已经停止在 Cluster Manager 中维护，请在 Cluster Explorer 应用程序和市场中查看新版的 <a href="{dashboardLink}/istio">Istio</a>。
  logging: 从 Rancher v2.5.0 开始，Cluster Manager 中的 Logging 已不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。请在 Cluster Explorer 应用程序和市场中查看新版的 <a href="{dashboardLink}/logging">Logging</a>。
  monitoring: 从 Rancher v2.5.0 开始，Cluster Manager 中的监控已经不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。请在 Cluster Explorer 应用程序和市场中查看新版的<a href="{dashboardLink}/monitoring">监控</a>。
  monitoringV2Warning: 从 Rancher v2.5.0 开始，Cluster Manager 中的监控已经不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。最新版的Rancher <a href="{dashboardLink}/monitoring">监控</a> 已经部署。
  multiclusterapp: 从 Rancher v2.5.0 开始，多集群应用已不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。请查看 <a href="{dashboardBase}c/local/fleet">Rancher 持续交付</a>功能，通过 GitOps 实现多集群应用的部署。
  notifiers: 从 Rancher v2.5.0 开始，Cluster Manager 中的 Notifiers 已经不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。请在 Cluster Explorer 应用程序和市场中查看 Rancher 新版<a href="{dashboardLink}/monitoring">监控</a>中 Notifiers 的集成。
  pipeline: 从 Rancher v2.5.0 开始，Pipelines 已经不推荐使用 - 请查看 <a href="https://rancher.com/docs/rancher/v2.x/en/faq/deprecated-features-25x" target="_blank">FAQ</a>。有关持续交付功能，请查看 Cluster Explorer 中的 <a href="{dashboardBase}c/local/fleet">Rancher 持续交付</a>。
certificatesPage:
  algorithm: 算法
  cn: 域名
  detail:
    header: "證書: {name}"
  domainNames:
    labelText: 域名
    single: <a href="https://{cn}" target="_blank" rel="nofollow noreferrer noopener">{cn} <i class="icon icon-sm icon-external-link"/></a>
    wildcardSingle: "{cn}"
    wildcardWithSan: "{cn} +\n{sans, plural,\n=1{1other}\nother{#others}\n}\n"
    withSan: "<a href=\"https://{cn}\" target=\"_blank\" rel=\"nofollow nefererrer noopener\">{cn} <i class=\"icon icon-sm icon-external-link\"></i></a> +\n{sans, plural,\n=1{1other}\nother{#others}\n}\n"
  expires: 過期時間
  expiresDate: 過期時間
  fingerprint: 指紋
  index:
    header: 證書
    linkTo: 添加證書
    noData: 沒有定義證書
    noMatch: 没有证书与当前搜索匹配
  issuer: 發布機構
  new:
    form:
      description:
        placeholder: "例如: Mydomain.com的EV證書"
      name:
        placeholder: "例如: Mydomain.com"
    header: 添加證書
  serialNumber: 序列號
  valid: 生效時間
clusterIstioPage:
  allowSystemGroup:
    "false": 允许集群所有者和指定的</b>成员访问 Kiali 和 Jaeger UI。
    "true": 允许<b>所有</b>成员访问 Kiali 和 Jaeger UI。
  config:
    gatewayEnabled:
      label: 启用 Ingress 网关
    gatewayType:
      label: Ingress 网关的服务类型
    grafanaEnabled:
      label: 启用 Grafana
    grafanaPersistenceEnabled:
      label: 为 Grafana 启用持久存储
    header:
      gateway: Ingress 网关
      grafana: Grafana
      mixer: Mixer
      pilot: Pilot
      prometheus: Prometheus
      tracing: 跟踪
    http2Port:
      label: Http2 端口
    httpsPort:
      label: Https 端口
    loadBalancerIP:
      label: Load Balancer IP
      placeholder: "例如: 192.0.0.1"
    mixerPolicyEnabled:
      label: Enable Mixer Policy
    mtlsEnabled:
      label: 服务到服务双向 TLS
    prometheusRetention:
      label: Prometheus 数据保留
      placeholder: "例如: 6h"
    traceSampling:
      label: 跟踪抽样比例
      placeholder: "例如: 1"
    tracingEnabled:
      label: 启用跟踪
  confirmDisable: 你确定吗?再次单击将禁用 Istio
  customAnswers:
    detail: 配置自定义的应答。
    title: 自定义应答
    warning: "自定义应答是一个高级配置选项。{appName}预配置了一些自定义应答, 以保证能满足一些 <a href='https://istio.io/latest/docs/setup/additional-setup/cni/#prerequisites' target='_blank' rel='nofollow noreferrer'>特定</a> 的Istio配置。 添加和移除自定义应答可能会生成一些无效的Istio配置。在保存修改之前，请确保您明白这些改动可能会带来的结果。"
  disable: 禁用
  disabled: Istio 尚未启用，请单击“启用”按钮启用它。
  enableActionLabel: 启用
  enableMonitoring:
    label: 启用监控
  enabled: Istio 已启用。为了利用 Istio，您需要为每个命名空间启用 Istio sidecar 自动注入。如果在现有命名空间上启用它，则需要重新部署现有工作负载，以利用 sidecar 自动注入。
  existingClaim:
    label: Existing Claim for {component}
  goToMonitoring: istio 的工作需要监控。 如果您想修改这些值，请转到 <a href="/c/{clusterId}/monitoring/cluster-setting">监控</a> 页面修改并保存。
  header: Istio
  ingress:
    detail: 监控和路由规则配置。
    title: Ingress 网关
  insufficientSize:
    selectors:
      all: 请确保至少有一个节点与 {cpu} milli cpu 和 {memory} MiB 内存匹配，以启用 {component} 工作负载。
      cpu: 请确保至少有一个节点将节点选择器与 {cpu} milli CPUs 匹配，以启用 {component} 工作负载。
      memory: 请确保至少有一个节点将节点选择器与 {memory} MiB 内存匹配，以启用 {component} 工作负载。
      unsupported: 不支持值为 true、false 或 number 的节点选择器
    total:
      all: 请确保至少有 {minCpu} milli CPUs 和 {minMemory} MiB 内存可供 {action} Istio 使用。
      cpu: 请确保至少有 {minCpu} milli CPUs 可供 {action} Istio 使用。
      memory: 请确保您至少有 {minMemory} MiB 的内存可供 {action} Istio 使用。
    workload:
      all: 请确保至少有一个节点具有 {cpu} milli CPUs 和 {memory} MiB 内存，可用来部署 {component} 工作负载。
      cpu: 请确保至少有一个具有 {cpu} milli CPUs 的节点可用来部署 {component} 工作负载。
      memory: 请确保您至少有一个具有 {memory} MiB 内存的节点可用来部署 {component} 工作负载。
  links:
    grafana:
      label: Grafana UI
    jaeger:
      label: Jaeger UI
    kiali:
      label: Kiali UI
    prometheus:
      label: Prometheus UI
  members:
    detail: 控制哪些用户能访问 Kiali 和 Jaeger UI
    title: 成员访问
  mixer:
    detail: 常规策略和遥测配置。
    title: Mixer
  monitoringNotDeployed: 监控仍在部署中。 在确保集群中有足够的资源启用 Istio 之前，请等待监控部署完成。
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择要运行 {component} 工作负载的节点
  notReady: 在当前集群中安装 Istio…
  pilot:
    detail: 配置流量管理
    title: Pilot
  telemetryAndPolicy: Telemetry And Policy
  tracing:
    detail: 配置跟踪请求。
    title: 跟踪
  upgradeMonitoring: 在启用 Istio 之前，您需要首先将集群监视升级到 0.0.4 或更高版本。访问 <a href="/c/{clusterId}/monitoring/cluster-setting">此处</a> 去升级集群监控。
  version: Istio 版本
  warning:
    mixerBreaking: Istio升级到1.8需要先禁用再重新启用
clusterPage:
  annotationsDetail: 为集群配置标签和注释。
  edit: 編輯集群
  internal: <b>警告:</b>{appName}集群用作數據存儲，只應授予管理員擁有寫入權限.<br>對此集群具有寫入權限的用戶，可以使用它授予自己安裝並管理的其他集群的訪問權限。
  removeMemberNote: "注意: 刪除成員不會刪除其項目權限"
configMapsPage:
  index:
    header: 配置映射
    linkTo: 添加配置映射
    noData: 沒有定義配置映射
    noMatch: 沒有配置映射與當前搜索匹配
  table:
    keys: 鍵
containersPage:
  table:
    noData: 沒有可以顯示的容器
    noMatch: 沒有符合當前搜索的容器
    sparkPrefixCpu: "CPU: "
    sparkPrefixMemory: "內存:"
    sparkPrefixNetwork: "網絡:"
    sparkPrefixStorage: "存儲:"
  welcome:
    container: 立即開始
    containerLink: 創建一個容器
    kubernetesLink: 安裝 Kubernetes
    orchestrator: 安裝另一個編排引擎
cruVolumeClaimTemplate:
  capacity:
    label: 容量
    unit: GiB
  customize:
    detail: 自定义高级设置
    title: 自定义
  define:
    addActionLabel: 确定
  name:
    placeholder: e.g. myvol
  pv:
    label: 持久卷 (PV)
    prompt: 选择持久卷 (PV)...
  source:
    label: 来源
    pv: 使用已有的持久卷 (PV)
    storageClass: 使用存储类创建新的持久卷 (PV)
  storageClass:
    label: 存储类 (Storage Class)
    prompt: 使用默认 (Storage Class)
  title:
    define: 配置 PVC 模板
    edit: "编辑 PVC 模板: {name}"
    new: 添加 PVC 模板
    view: "PVC 模板: {name}"
destinationRulePage:
  noData: 没有定义目标规则。
  noMatch: 没有与当前搜索匹配的目标规则
  notSupported: 集群 networking.istio.io/v1alpha3 API 不可用。
  table:
    host:
      label: Host
    subsets:
      label: Subsets
editHost:
  customName:
    help: 如果此處未設置，名稱將顯示為主機名
    label: 自定義名稱
    placeholder: 例如:dev1
  description:
    label: 描述
    placeholder: "例如: 我的開發主機"
  hostname:
    help: 由主機操作系統獲取
    label: 主機名
  ips:
    addActionLabel: 添加IP
    help: 如果設置，調度器將從中選擇一個IP地址並將發布的端口綁定到該地址。
    label: 調度IP
    valueLabel: IP地址
    valuePlaceholder: "例如: 1.2.3.4"
  labels:
    label: 標籤
  requireAny:
    addActionLabel: 添加標籤需求
    help: 如果設置，容器必須具備設置的一個或者多個標籤才能夠被調度到該主機。如果僅設置Key而Value留空，具備相應Key的容器可以被調度到該主機而忽略Value的值。<code>io.rancher.container.system</code>標籤是運行系統容器所必須的。
    label: 容器標籤需求
  title: 編輯主機
editNodePool:
  title: 节点池污点（Taints）
editService:
  title: 編輯服務
editUser:
  form:
    name:
      label: 顯示名稱
      placeholder: "例如: John Smith"
    otherRoles:
      label: 移除角色
    password:
      confirm: 確認密碼
      error: 密碼必須相同
      label: 修改密碼
      mustChangePassword:
        edit: 要求用戶在下次登錄時更改密碼
        new: 要求用戶在首次登錄時更改密碼
      new: 新密碼
    username:
      label: 用戶名
  title: 編輯用戶
failWhalePage:
  header: 錯誤
  logoutButton: 註銷
  reloadButton: "<a href=\"#\" onclick=\"window.location.href = window.location.href; return false;\">重新加載</a>以重試或\n"
formAccessModes:
  accessROX: 多主機只讀
  accessRWO: 單主機讀寫
  accessRWX: 多主機讀寫
  label: 訪問模式
formBalancerRules:
  access:
    internal: 內部
    label: 訪問
    public: 公開
  addInstanceLabel: 添加容器
  addSelectorLabel: 添加選擇器
  addServiceLabel: 添加服務
  addTargetLabel: 添加規則
  backendName:
    label: 後端
    placeholder: "例如: webapp"
  detail: 根據主機、 端口、 路徑或IP地址映射請求到不同的目標。
  hostname:
    label: 請求頭信息
    placeholder: "例如: example.com"
  label: 目標規則
  noRules: 無規則
  path:
    label: 路徑
    placeholder: "例如: /foo"
  priority:
    label: 優先級
  protocol:
    label: 協議
  selector:
    label: 選擇器
    placeholder: "例如: foo=bar"
  sourceIp:
    label: 主機IP
    placeholder: "例如: 1.2.3.4， 默認: 所有"
  sourcePort:
    label: 監聽端口
    placeholder: "例如: 80"
  status: "{count, plural,\n=0{無規則}\n=1{#條規則}\nother{#條規則}\n}\n"
  target: 目標
  targetPort:
    label: 端口
    placeholder: "例如: 80"
formMembers:
  members:
    addGroup: 添加組
    addMember: 添加成員
    addServiceAccount: 添加服務帳戶
    addUser: 添加用戶
    customRoles: 自定義角色
    errors:
      memberNameReq: 必須設置成員名稱
      memberRoleReq: 必須設置成員角色
      nameInExists: 名稱已經存在，請使用新的項目名稱。
      nameReq: 名稱(必填)
      ownerReq: 必須至少有一個具有所有者角色的成員。
    group: 組
    kind:
      label: 類型
    labelText: 成員
    multipleRoles: 多個角色
    name:
      label: 名稱
    noAddUser: 您是唯一的活動註冊用戶。
    role:
      label: 角色
    serviceaccount: 服務賬號
    user: 用戶
  owner: "{type} 所有者"
formMenu:
  iframeEnabled:
    label: 使用 iframe
  link:
    label: 链接地址
    placeholder: e.g. https://www.example.com
  menu:
    add: 添加菜单
  name:
    label: 菜单名称
  scope:
    cluster:
      label: 应用于集群
    project:
      label: 应用于项目
globalMonitoringPage:
  cluster: 全局监控所在集群
  confirmDisable: 你确定吗? 再次单击将禁用全局监控
  customAnswers:
    detail: 配置自定义的应答。
    title: 自定义应答
  disable: 禁用
  disabled: 全局监控未启用。点击启用来激活全局监控。 如果在集群中启用了集群监控并且版本不低于<code>v0.0.7000</code>，你将可以通过全局监控查看多个集群的指标。
  enableActionLabel: 启用
  enabled: 全局监控已启用。如果在集群中启用了集群监控并且版本不低于<code>v0.0.7000</code>，你可以通过全局监控查看多个集群的指标。
  globalMonitoringClusterUnavailable: 集群 {clusterName} 不可用。
  grafana:
    detail: 全局 Grafana 和{appName}监控大屏的配置。
    enableGrafanaSidecar:
      label: Grafana 启用初始化 Sidecar
    enablePersistence:
      label: Grafana 启用持久化存储
    serviceType:
      label: Grafana UI SVC 类型
    size:
      label: Grafana 持久化存储大小
      placeholder: "例如: 10Gi"
    storageClass:
      label: Grafana 默认存储类
    title: 监控大屏
  header: 全局监控（实验性）
  insufficientSize:
    selectors:
      all: 请确保至少有一个节点与{cpu} milli cpu 和{memory} MiB 内存匹配，以启用{component}工作负载。
      cpu: 请确保至少有一个节点将节点选择器与{cpu} milli cpu 匹配，以启用{component}工作负载。
      memory: 请确保至少有一个节点将节点选择器与{memory} MiB 内存匹配，以启用{component}工作负载。
      unsupported: 不支持值为“true”、“false”或 number 的节点选择器
    total:
      all: 请确保至少有{minCpu} milli cpu 和{minMemory} MiB 内存可供全局监控使用。
      cpu: 请确保至少有{minCpu} milli cpu 可供全局监控使用。
      memory: 请确保您至少有{minMemory} MiB 的内存可供全局监控使用。
    workload:
      all: 请确保至少有一个节点具有{cpu} milli cpu 和{memory} MiB 内存，可用来部署{component}工作负载。
      cpu: 请确保至少有一个具有{cpu} milli cpu 的节点可用来部署{component}工作负载。
      memory: 请确保您至少有一个具有{memory} MiB 内存的节点可用来部署{component}工作负载。
  links:
    globalMonitoring:
      label: 监控大屏
    grafana:
      label: Grafana UI
    thanos:
      label: Thanos UI
  noAvailableClusters: 没有可用集群，请先添加一个集群。
  noTemplate: 无法加载全局监控模版
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择要运行 {component} 工作负载的节点。
  notReady: 正在安装全局监控到指定集群的系统项目里...
  objectStorageWarning: 每个集群中的 Thanos sidecar 都需要对象存储的密钥。所以这些集群的管理员也可以在集群的系统项目里看到你所配置的存储的密钥。
  store:
    aliyunoss:
      accessKey:
        label: 阿里云 Access Key
        placeholder: 你的阿里云 access key
      bucketName:
        label: 阿里云存储桶名称
        placeholder: 例如：backups
      endpoint:
        beijing: 华北 2（北京）
        chengdu: 西南 1（成都）
        east-1: 美国东部 1 （弗吉尼亚）
        eu-central-1: 欧洲中部 1 （法兰克福）
        eu-west-1: 英国（伦敦）
        hangzhou: 华东 1（杭州）
        heyuan: 华南 2（河源）
        hongkong: 中国（香港）
        huhehaote: 华北 5（呼和浩特）
        label: 阿里云区域
        me-east-1: 中东东部 1 （迪拜）
        northeast-1: 亚太东北 1 （日本）
        qingdao: 华北 1（青岛）
        shanghai: 华东 2（上海）
        shenzhen: 华南 1（深圳）
        south-1: 亚太南部 1 （孟买）
        southeast-1: 亚太东南 1 （新加坡）
        southeast-2: 亚太东南 2 （悉尼）
        southeast-3: 亚太东南 3 （吉隆坡）
        southeast-5: 亚太东南 5 （雅加达）
        west-1: 美国西部 1 （硅谷）
        zhangjiakou: 华北 3（张家口）
      label: 阿里云 OSS
      secretKey:
        label: 阿里云 Secret Key
        placeholder: 你的阿里云 secret key
        provided: 已提供
    azure:
      bucketName:
        label: Container 名称
        placeholder: 例如：mycontainer
      endpoint:
        label: Endpoint
        placeholder: 例如：http://mystorageaccount.blob.core.windows.net
      label: Azure 存储
      maxRetries:
        label: 最大重试次数
        placeholder: 例如：0
      storageAccount:
        label: Storage Account
        placeholder: 你的 Storage Account
      storageAccountKey:
        label: Storage Account Key
        placeholder: 你的 Storage Account Key
    detail: 将多集群的 Prometheus 指标存储到对象存储上。
    enabled:
      label: 存储指标到对象存储
    gcs:
      bucketName:
        label: 存储桶名称
        placeholder: 例如：backups
      label: Google 云存储
      serviceAccount:
        label: Service Account
        placeholder: 你的 Google service account
    s3:
      accessKey:
        label: S3 Access Key
        placeholder: 你的 AWS access key
      bucketName:
        label: S3 存储桶名称
        placeholder: 例如：backups
      endpoint:
        label: S3 区域地址
        placeholder: 例如：s3.us-west-2.amazonaws.com
      label: S3
      secretKey:
        label: S3 Secret Key
        placeholder: 你的 AWS secret key
        provided: 已提供
    tencentcloudcos:
      appid:
        label: APP ID
        placeholder: 例如：1250000000
      bucketName:
        label: 存储桶名称
        placeholder: 例如：backups
      label: 腾讯云 COS
      region:
        label: 区域
        placeholder: 例如：cos.ap-beijing-1.myqcloud.com
      secretId:
        label: 密钥 ID
        placeholder: 腾讯云密钥 ID
      secretKey:
        label: 密钥 Key
        placeholder: 腾讯云密钥 Key
    title: 对象存储
  svc:
    clusterIp: "{appName}代理"
    loadBalancer: 4 层负载均衡
    nodePort: NodePort
  thanos:
    detail: 查询多集群 Prometheus 指标的组件。
    serviceType:
      label: Thanos Query UI 服务类型
    title: Thanos Query
  updating: 正在更新全局监控组件...
  version: 全局监控版本
hostsPage:
  addContainer: 添加容器
  cloudHostsPage:
    addPage:
      driver: "驅動: "
      env: 環境
      header: 添加主機
      instance: "類型:"
      launch: 啟動
      name:
        label: 主機名稱
        placeholder: "例如: node01"
      os: "操作系統: "
      size: "大小: "
      storage: "存儲:"
      template: "模板名稱: "
      transfer: "流量限制:"
      transferUnit: TB
      zone: "區域:"
  hostPage:
    conditions:
      diskPressure: 磁盤負載
      diskSpace: 磁盤空間
      memoryPressure: 內存負載
      ready: Kubelet
    containerDVersion: Containerd 版本
    containersTab:
      detail: 在此主機上運行的容器列表
      header: 容器
    dockerVersion: Docker版本
    header:
      title: "主機: {name}"
    hostname: 主機名
    infoMultiStats:
      cpu: CPU
      docker: "Docker: "
      ip: IP地址
      kernel: 內核
      memory: 內存
      milliCpu:
        labelText: mCPU
      os: 操作系統
      provider:
        labelText: "供應商:"
        noHost: 自定義
      storage: 數據卷
    ipAddress: IP地址
    kernelVersion: 內核版本
    kubeProxyVersion: Kube-Proxy版本
    kubeletVersion: Kubelet版本
    limits:
      cpu: "CPU限制: "
      memory: "內存限制: "
      storage: "本地卷限制: "
    operatingSystem: 操作系統
    portsTab:
      detail: 這些屬性顯示哪些端口已被映射到哪裡
      header: 端口
      table:
        body:
          noData: 主機當前未映射任何端口
        header:
          container: 容器
          ip: IP地址
          port: 端口
          service: 服務
    storageTab:
      detail: 這些屬性顯示主機卷細節
      header: 卷
      table:
        body:
          noData: 主機未使用任何數據卷
        header:
          hostPath: 主機路徑
          mounts: 掛載
          state: 狀態
    version: 版本
  new:
    addCluster:
      cluster:
        label: 集群
      description: 將此新主機附加到集群，委派角色等
      label: 集群選項
      roles:
        label: 角色
      table:
        label:
          control: 用於管理
          etcd: 用於etcd
          worker: 作為worker節點使用
    custom: 添加自定義主機
    header:
      customText: 添加自定義主機
      text: 添加主機
    manageLink: 管理Docker-machine驅動
    name:
      placeholder: "例如: node01"
identityBlock:
  loading: 加載中...
landingPage:
  ember: 集群管理
  emberLong: Rancher 多集群管理
  header: 默认登录页面
  vue: 仪表盘
  vueLong: Rancher 仪表盘
languageName: 繁體中文
ldap:
  accessConfig:
    connectionTimeout:
      labelText: 服務連接超時
    defaultDomain:
      helpText: 當用戶未指定登錄域時使用該域
      labelText: 默認登錄域
      placeholder: "例如: Mycompany"
    groupSearchBase:
      helpText: 設置後，會在此搜索起點下搜索用戶組，而不會在用戶搜索起點下搜索用戶組。
      labelText: "用戶組搜索起點:"
      placeholder: "例如: ou=Groups,dc=Mycompany,dc=com"
    header: 1. 配置{providerName}服務器
    port:
      checkbox: TLS
      labelText: 端口
      radioGroup:
        label: 加密
        none: None
        starttls: STARTTLS
        tls: TLS
    serviceAccountDistinguishedName:
      labelText: 服務帳戶專有名稱
    starttls:
      helpText: 通过在连接过程中使用 TLS 来封装未加密的连接。不能与 TLS 一起使用。
      label: Start TLS
    subtext1: 請輸入地址、端口及協議以連接{providerName}服務器。<code>389</code>是標準端口(未加密)，<code>636</code>是加密連接(TLS)端口。
    subtext2: "{appName}需要一個對所有登錄域有隻讀權限的服務賬號。"
    userSearchBase:
      labelText: 用戶搜索起點
      placeholder: "例如: ou=Users,dc=Mycompany,dc=com"
  accessEnabled:
    connectionTimeout:
      labelText: "服務連接超時:"
    disable:
      confirmDisable:
        pre: 關閉訪問控制
    general:
      defaultDomain: "缺省域:"
      encryption: 加密
      header: 常規
      searchBase: "搜索起點:"
      server: "服務器:"
      serviceAccount: "服務賬號:"
      tls: "TLS:"
    group:
      header: 組
      name: "名稱字段:"
      objectClass: "對象分類:"
      search: "搜索字段:"
      searchFilter: "搜索過濾器:"
      uniqueId: "唯一标识:"
    header: 驗證
    serviceAccountDistinguishedName:
      labelText: "服務帳戶專有名稱:"
    subtext: 如需修改服務器配置，請在下方關閉訪問控制後重新設置
    users:
      disabledBitMask: "禁用位掩碼:"
      enabled: "啟用字段:"
      header: 用戶
      login: "登錄字段:"
      name: "名稱字段:"
      objectClass: "對象分類:"
      search: "搜索字段:"
      searchFilter: "搜索過濾器:"
      uniqueId: "唯一标识:"
  customizeSchema:
    cert:
      helpText: 如果需要，請輸入CA證書
      labelText: CA證書
      placeholder: 粘貼或導入證書，以-----BEGIN CERTIFICATE-----開頭。
    groups:
      groupDN:
        labelText: 組DN屬性
        placeholder: 專有名稱
      groupMemberMapping:
        labelText: 組成員映射屬性
      groupMemberUser:
        labelText: 組成員用戶屬性
        placeholder: uid
      groupUniqueIdAttribute:
        helpText: 请使用用户组创建后全局唯一的属性，避免因该属性值变化导致用户权限丢失
        labelText: 组唯一标识
      header: 組
      name:
        labelText: 名稱屬性
      nestedGroup:
        disabled:
          labelText: 只搜索直接的組成員關係
        enabled:
          helpText: 嵌套搜索在大目錄中可能會比較慢
          labelText: 搜索直接和嵌套的組成員關係
        title: 嵌套的組成員
      objectClass:
        labelText: 對象分類
      search:
        labelText: 搜索屬性
      searchFilter:
        labelText: 搜索過濾器
    header: 2. 自定義架構
    helpText: 如果活動目錄架構(Schema)不是標準格式，可以在這裡進行自定義設置。
    users:
      disabledBitMask:
        labelText: 禁用狀態位掩碼
      enabledAttribute:
        labelText: 用戶啟用的屬性
      header: 用戶
      login:
        labelText: 登錄屬性
      name:
        labelText: 用戶名屬性
      objectClass:
        labelText: 對象類型
      search:
        labelText: 搜索屬性
      searchBase:
        labelText: "用戶搜索起點:"
      searchFilter:
        labelText: 搜索過濾器
      userMemberAttribute:
        labelText: 用戶成員屬性
      userUniqueIdAttribute:
        helpText: 请使用用户创建后全局唯一的用户属性，避免因该属性值变化导致用户权限丢失
        labelText: 用户唯一标识
  header:
    disabled:
      label: "{providerName}未設置"
  providerName:
    ad: Active Directory
    freeipa: FreeIPA
    openldap: OpenLDAP
    saveLabels:
      ad: 啟用Active Directory認證
      freeipa: 啟用FreeIPA認證
      openldap: 啟用OpenLDAP認證
  testAuth:
    authenticate:
      post: 測試中...
      pre: 驗證
    header: 3. 測試並啟用認證
    helpText: "通過{providerName}賬號進行驗證測試以確認配置是否正確:"
    password:
      labelText: 密碼
    userName:
      labelText: 用戶名
machineTemplatesPage:
  custom: 自定義添加一台現有的正在運行Docker的主機
  new:
    btn: 設置
    helpText: 啟動一個新的主機或通過SSH導入一個已經在運行的Docker
  templateBox:
    button: 選擇
    labels:
      region: 實例所在地區
      zone: 區域
  title: 添加主機
membersPage:
  add:
    form:
      kind: 類型
      member: 成員
      role: 角色
    title: 添加{type}成員
  index:
    localLink: 添加成員
    table:
      created: 創建時間
      name: 名稱
      noData: 目前還沒有成員
      noMatch: 沒有成員與當前搜索匹配
      subjectKind: 類型
      template: 角色
      userId: 用戶
  title: 成員
modalAboutComponent:
  cattle: Cattle
  cli: 命令行
  component: 組件
  helm: Helm
  linuxImageList: Linux 镜像列表
  machine: 主機
  ui: 用戶界面
  version: 版本
  windowsImageList: Windows 镜像列表
modalAddCloudKey:
  amazonec2:
    accessKey:
      label: Access Key
      placeholder: Your AWS access key
    secretKey:
      label: Secret Key
      placeholder: Your AWS secret key
  azure:
    clientId:
      label: Client ID
      placeholder: Your Client ID
    clientSecret:
      label: Client Secret
      placeholder: Your Client Secret
  description:
    placeholder: "例如: cloud credential for production"
  digitalocean:
    accessToken:
      help: |
        粘贴来自 DigitalOcean 的<a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="nofollow noreferrer noopener">Applications & API</a>。
      label: Access Token
      placeholder: 您的 DigitalOcean API 访问令牌。
  errors:
    region: 您必须选择一个区域来验证您的密钥。
    validation: "{ status }: 验证密钥时出现问题，请输入有效凭证，然后重试。"
  header:
    edit: 编辑云凭证
    new: 添加云凭证
  linode:
    authAccountButton: "下一步: 实例配置"
    token:
      help: |
        从 Linode 粘贴个人访问令牌<a href="https://cloud.linode.com/profile/tokens" target="_blank" rel="nofollow noreferrer noopener">API Tokens</a> screen
      label: 访问令牌
      placeholder: 您的 Linode API 访问令牌
  name:
    placeholder: "例如: production-credentials"
  oci:
    secretKey:
      label: 用户私钥
      placeholder: 指定 OCI 用户的私有 API 密钥内容(PEM 格式)
    secretKeyPassphrase:
      label: 用户私钥密码
      placeholder: 保护指定的 OCI 用户的私钥文件的密码(如果有的话)
    tenancyOcid:
      label: Tenancy OCID
      placeholder: The OCID of the tenancy in the user account exists
    userFingerprint:
      label: 用户指纹
      placeholder: 与指定用户的私有 API 密钥对应的指纹
    userOcid:
      label: User OCID
      placeholder: The OCID of a user
  saving:
    validating: 确认键
  type: 凭证类型
  typeSelect:
    prompt: 选择云凭证提供商类型
  vmwarevsphere:
    password:
      label: 密码
modalHostEvacuate:
  button: 疏散
  header: 確認進行疏散操作
  helpText: 此操作將停用該主機並刪除主機上所有運行的非基礎設施容器
  protip: "進階提示: 在點擊時按住{key}鍵以跳過確認操作"
modalShortcuts:
  cluster: 集群
  delete: 刪除所選擇的(在表視圖中)
  global: 全局
  kubectl: Kubectl Shell
  nextTab: 下一頁
  other: 其他的東西
  project: 項目
  search: 聚焦搜索字段
  shift: Shift-{key}
  shortcuts: 您在這裡
  time: 時間
  title:
    pl: 快捷鍵
    rancher: 歡迎來到傳送門！
  viewGroup: 切換分組視圖
  world: 世界
model:
  account:
    kind:
      admin: 管理員
      agent: 代理
      project: 環境
      registeredAgent: 已註冊代理
      service: 服務
      user: 用戶
  cluster:
    name: 集群名
  identity:
    displayType:
      group: 組
      localUser: 本地用戶
      org: 組織
      team: 團隊
      unknown: "{type}？"
      user: 用戶
  ingress:
    displayKind: L7 Ingress
  machine:
    role:
      controlPlane: Control
      etcd: etcd
      worker: Worker
  openldapconfig:
    domain:
      help: 僅該搜索起點下的用戶能夠訪問
      label: "用戶搜索起點:"
      placeholder: "例如: ou=Users,dc=Mycompany,dc=com"
    server:
      label: 主機名或IP地址
    serviceAccountPassword:
      label: 服務賬號密碼
    serviceAccountUsername:
      label: 服務賬號用戶名
  projectMember:
    role:
      member: 成員
      owner: 所有者
      readonly: 只讀
      restricted: 受限
  service:
    displayKind:
      generic: 服務
      loadBalancer: L4層負載均衡
monitoringPage:
  cluster:
    disabled: 当前集群监控尚未启用。
    title: 集群监控配置
    toDisable: 监控已启用。点击下面的保存按钮来禁用当前集群的监控。
  clusterNotEnabled: 集群级别监控未启用。将只采集自定义指标。
  config:
    grafana:
      enablePersistence:
        label: 为 Grafana 启用持久化存储
      size:
        label: Grafana 持久化存储大小
        placeholder: "例如: 10Gi"
      storageClass:
        label: Grafana 默认存储类
    header: Prometheus 配置
    nodeexporter:
      cpuLimit:
        label: Node Exporter CPU 限制
        placeholder: "例如: 200"
        unit: milli CPUs
      enable: 启用 Node Exporter
      label: Node Exporter 主机端口
      memoryLimit:
        label: Node Exporter 内存限制
        placeholder: "例如: 200"
    operator:
      memoryLimit:
        label: Prometheus Operator 内存限制
        placeholder: "例如: 500"
    prometheus:
      cpuLimit:
        label: Prometheus CPU 限制
        placeholder: "例如: 1000"
        unit: milli CPUs
      cpuRequest:
        label: Prometheus CPU 预留
        placeholder: "例如: 1000"
        unit: milli CPUs
      enablePersistence:
        label: 为 Prometheus 启用持久化存储
      memoryLimit:
        label: Prometheus 内存限制
        placeholder: "例如: 1000"
      memoryRequest:
        label: Prometheus 内存预留
        placeholder: "例如: 1000"
      size:
        label: Prometheus 持久化存储大小
        placeholder: "例如: 50Gi"
      storageClass:
        label: Prometheus 默认存储类
    retention:
      label: 数据保存时间
    storageClass:
      label: 存储类
    types:
      none: None
      prometheus: Prometheus
  confirmDisable: 你确定吗？再次点击将会禁用监控。
  disable: 禁用监控
  enableActionLabel: 启用监控
  errors:
    disableIstioFirst: 在禁用集群监控之前，需要先禁用 Istio。
  insufficientSize:
    prometheus:
      all: 请确保你至少有一个节点有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活 Prometheus 工作负载。
      cpu: 请确保你至少有一个节点有 {cpu} milli CPUs 可用来激活 Prometheus 工作负载。
      memory: 请确保你至少有一个节点有 {memory} MiB 内存可用来激活 Prometheus 工作负载。
    selectors:
      all: 请确保你至少有一个匹配节点选择器的节点有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活 Prometheus 工作负载。
      cpu: 请确保你至少有一个匹配节点选择器的节点有 {cpu} milli CPUs 可用来激活 Prometheus 工作负载。
      memory: 请确保你至少有一个匹配节点选择器的节点有 {memory} MiB 内存可用来激活 Prometheus 工作负载。
    total:
      all: 请确保你至少有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活监控。
      cpu: 请确保你至少有 {cpu} milli CPUs 可用来激活监控。
      memory: 请确保你至少有 {memory} MiB 内存可用来激活监控。
  noPermission: 您没有权限配置 {level} 级别监控。
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择部署监控相关的工作负载所运行的节点。
  project:
    disabled: 当前项目监控尚未启用。
    title: 项目监控配置
    toDisable: 监控已启用。点击下面的保存按钮来禁用当前项目的监控。
  prometheus: 监控尚未启用，点击下面的保存按钮去启用监控。
  resourceLimitsHelp: "启用集群监视时，需要确保工作节点和 Prometheus pod 具有足够的资源。请访问 <a href=\"https://rancher.com/docs/rancher/v2.x/en/cluster-admin/tools/monitoring/#resource-consumption\" target=\"_blank\" rel=\"nofollow noreferrer\">Rancher docs</a>了解建议的资源限制。"
  systemProject: 如果您想为系统项目中的 pods 收集自定义指标，请直接启用集群级别监控。
  toUpdate:
    cluster: 集群级别监控已启用。
    project: 项目级别监控已启用。
  update: 更新监控配置
  upgrade: 升级监控组件到最新版本 {version}。
  upgradeAvailable: (最新版本 {version})
  version: 监控组件版本
newConfigMap:
  addActionLabel: 添加配置映射
  description:
    placeholder: "例如: app"
  name:
    placeholder: "例如: map"
  title:
    edit: "編輯配置映射: {name}"
    new: 添加ConfigMap
    view: "配置映射: {name}"
  values:
    binaryLabel: 配置映射值(二进制值)
    label: 配置映射
newPassword:
  confirmPassword: 確認密碼
  password: 新密碼
  passwordNoMatch: 密碼不匹配
  placeholder: 新密碼
pipelinesPage:
  lastActivity: 最新運行
  pipelines: 流水線
  table:
    noData: 沒有任何流水線
    noMatch: 沒有流水線符合當前搜索
    status: 狀態
podPage:
  containerImage: "{container}的鏡像"
  displayImage: "{image} + 其他{sidecar, plural, =1 {1個image} other {#個images}}"
  header: "Pod: {name}"
  image: 鏡像
  nodeIp: 主機
  podIp: Pod IP
podSecurityPoliciesPage:
  addPodSecurityPolicy: 添加策略
  detail:
    header: 策略
  editPodSecurityPolicy: 編輯策略
  index:
    description: 將策略應用於由具有此角色的用戶創建的Pod。
    header: Pod安全策略
    table:
      created: 創建時間
      name: 名稱
      noData: 未定義Pod安全策略
      noMatch: 沒有與當前搜索匹配的Pod安全策略
  new:
    errors:
      nameInExists: 名稱已存在， 請使用新的Pod安全策略名稱。
      nameReq: 名稱(必填)
    form:
      name:
        labelText: 名稱
        placeholder: "例如: 策略"
  saveEdit: 編輯
  saveNew: 創建
projectRow:
  none: 無描述
  orchestration: 編排
realmNames:
  all: 全部
  asia: 亞洲
  euEast: 歐洲東部
  euWest: 歐洲西部
  usEast: 美國東部
  usWest: 美國西部
repositories:
  enable: 設置代碼庫
  header: 代碼庫
  message: 選擇壹個示例代碼庫或者使用您自己的代碼庫來設置流水線。
  table:
    noData: 沒有任何代碼庫
    noMatch: 沒有代碼庫符合當前搜索
    repository: 代碼庫
saveCancel:
  cancel: 取消
  create: 創建
  edit: 保存
  next: 下一步
  saved: 已保存!
  saving: 保存中...
schedulingRuleRow:
  containerLabel: 容器標籤
  containerName: 容器名稱
  haveA: 具有
  hostLabel: 主機標籤
  must: 必須
  mustNot: 必須沒有
  of: 其
  serviceName: 服務名稱
  should: 最好
  shouldNot: 最好沒有
  theHost: 主機
searchableSelect:
  noMatch: 沒有匹配
  noOptions: 沒有可用的選項
servicePartial:
  noContainers:
    inactive:
      start: 啟動
    label: 沒有容器
tooltipExpire:
  label: 此集群证书即将过期。
  link: 立即轮换证书
volumeSource:
  aws-ebs:
    title: Amazon EBS Disk
  azure-disk:
    title: Azure Disk
  azure-file:
    title: Azure Filesystem
  cephfs:
    title: Ceph Filesystem
  cinder:
    title: Openstack Cinder Volume
  config-map:
    title: Config Map Volume
  csi:
    title: CSI
  csi-volume-longhorn:
    title: Longhorn
  customLogPath:
    logFormat:
      helpText: 您可以在</a>這裡<a href="http://fluentular.herokuapp.com/" target="_blank">測試正則表達式。
      label: 日誌格式
      useCustomRegex: 使用一個自定義Fluentd regex
      useExistingLogFormat: 使用現有的日誌格式
    mountPath:
      helpText: 容器中的日誌路徑
      label: 日誌路徑
      placeholder: "例如: /var/www"
  empty-dir:
    title: 空目錄卷
  fc:
    title: 光纖通道
  flex-volume:
    title: Flex Volume
  flocker:
    title: Flocker
  gce-pd:
    title: Google Persistent Disk
  glusterfs:
    title: Gluster Volume
  host-path:
    kind:
      Any: "任意: 不檢查目標路徑"
      BlockDevice: 現有block設備
      CharDevice: 現有character設備
      Directory: 現有目錄
      DirectoryOrCreate: "目錄: 不存在則創建"
      File: 現有文件
      FileOrCreate: "文件: 不存在則創建"
      Socket: 現有socket文件
      label: 主機路徑類型檢查
    path:
      label: 主機路徑
      placeholder: "例如: /data"
    title: 本地路徑
  iscsi:
    title: iSCSI Target
  local:
    title: 本地磁盤
  nfs:
    title: NFS Share
  photon:
    title: Photon Volume
  portworx:
    title: Portworx Volume
  quobyte:
    title: Quobyte Volume
  rbd:
    title: Ceph RBD
  scaleio:
    title: ScaleIO Volume
  secret:
    title: Secret Volume
  storageos:
    title: StorageOS
  vsphere-volume:
    title: VMWare vSphere Volume
waitKubernetes:
  activateHost: 等待主機激活
  addHost: 添加至少一台主機
  createStack: 創建Kubernetes系統應用棧
  startServices: 啟動服務
  waitApi: 等待Kubernetes API
yamlPage:
  errors: yaml文件中存在錯誤
